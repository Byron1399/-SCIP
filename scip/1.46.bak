#lang sicp
(define wucha 0.001)
(define (average v1 v2) (/ (+ v1 v2)
                           2))
(define (iterative-improve good? f)
   (lambda (guess)
     (define (try n)
       (let( ( next (f guess)))
         (if (good? guess next)
             next
             (try  next))))
     (try guess)))
     
(define (sqrt x)
  (define (f guess)
    (average  guess (/ x guess)))
  (define (good? v1 v2)
    (< (abs(- v1 v2)) wucha))
  ((iterative-improve good? f)1.0))
(define (fixed-point f x)
  
  (define (enough? v1 v2)
    (< (abs(- v1 v2)) wucha))
   (define (iter guess)
     (let ( ( next (f guess)))
      (if (enough? guess next)
          next
          (iter next))))
    (iter x))
(define(fix-point f x)
  (define (enough? v1 v2)
    (< (abs(- v1 v2)) wucha))
  ((iterative-improve enough? f)x))
  
  