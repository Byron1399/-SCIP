#lang sicp
(define (average v1 v2) (/ (+ v1 v2)
                           2))
(define (x-point p)
    (car p))

(define (y-point p)
    (cdr p))

(define (make-point a b) (cons a b))
(define (make-segment start end) (cons start end))
(define (midpoint-segment seg)
  (let(( a (car seg))
       ( b (cdr seg)))
       (define midpoint (cons  (average (car a) (car b))
                               (average (cdr b) (cdr a))))
       (print-point midpoint)))
(define (print-point p)
  (newline)
  (display"(")
  (display (x-point p))
  (display",")
  (display (y-point p))
  (display")"))
(define (make-juxing chang kuan) (cons chang kuan))
(define (chang juxing) (- (car(cdr(car juxing))) (car(car(car juxing)))))
(define (kuan juxing) (- (cdr(car(cdr juxing))) (cdr(cdr(cdr juxing)))))
(define (s juxing) (* (chang juxing) (kuan juxing)))
(define (z juxing) (* (+ (chang juxing) (kuan juxing)) 2))
(define a1 (make-point 1 2))
(define a2 (make-point 3 2))
(define a3 (make-point 3 1))
(define a4 (make-point 1 1))
(define l1 (make-segment a1 a2))
(define d1 (make-segment a2 a3))
(define juxing (make-juxing l1 d1))
(s juxing)
(define (print-segment seg)
  (print-point (car seg))
  (print-point (cdr seg)))


(define (print-juxing juxing)
  
   (let ((length (car juxing))
         (width (cdr juxing)))
         (newline)
         (display "length1")
         (print-segment length)

    
         (newline)
         (display "width1")
         (print-segment width)))
(print-juxing juxing)