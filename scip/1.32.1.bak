#lang sicp
(define (just a) a)
(define (inc a )(+ a 1))
(define (accumulate combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (term a) (accumulate combiner null-value term (next a) next b))))
(define (sum term a next b)
  (accumulate + 0 term a next b))
(define (pro term a next b)
  (accumulate * 1 term a next b))